{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import molsysmt as msm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How to get attributes from a molecular system\n",
    "\n",
    "Any attribute of the elements composing a molecular system such as name, index, id or type, as well as some simple observables, can be obtained by means of the method `molsysmt.get()`. Lets load a molecular system to play a bit with it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "molecular_system = msm.load('1tcd.mmtf', to_form='molsysmt.MolSys')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As first example lets obtain the names of the atoms with indices 32, 33 and 34 (0-based). The method `molsysmt.get()` has an input argument named `target` to choose the nature of the elements over which the inquery works: 'atom', 'group', 'component', 'chain', 'molecule', 'entity' or 'system'. By default `target` is 'atom'. Now lets pay attention to the input argument `indices`. `indices` allows us to specify a set of targetted elements by their indices, again, over which the inquery works. This way: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Atom names: ['N' 'CA' 'C']\n"
     ]
    }
   ],
   "source": [
    "# name of atoms with index 32, 33 or 34\n",
    "names = msm.get(molecular_system, indices=[32,33,34], name=True)\n",
    "print('Atom names:',names)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The number of attributes we want to know from these atoms is no limited to one. We can ask `molsysmt.get()` to extract as many attributes as you desire:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Atom names: ['N' 'CA' 'C']\n",
      "Group indices: [4 4 4]\n",
      "Group names: ['ILE' 'ILE' 'ILE']\n"
     ]
    }
   ],
   "source": [
    "# name, group index and group name of atoms with index 32, 33 or 34\n",
    "names, group_indices, group_names = msm.get(molecular_system, target='atom', indices=[32,33,34],\n",
    "                                            name=True, group_index=True, group_name=True)\n",
    "print('Atom names:', names)\n",
    "print('Group indices:', group_indices)\n",
    "print('Group names:', group_names)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that if no indices list is provided, the method applies over all elements of the targeted entity. See for example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3983\n"
     ]
    }
   ],
   "source": [
    "# number of atoms in the molecular system\n",
    "n_atoms = msm.get(molecular_system, target='atom', n_atoms=True)\n",
    "print(n_atoms)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "# number of chains in the molecular system\n",
    "n_chains = msm.get(molecular_system, target='atom', n_chains=True)\n",
    "print(n_chains)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The method `msm.get()` can also take the input argument `selection`. The use of `selection` is explained in secction XXX. Lets see how `msm.get()` works with `selection` with a simple example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([148, 149, 150, 151, 152, 153, 154])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Indices of atoms in group with index 20 (with molsysmt.select()!!!)\n",
    "msm.select(molecular_system, target='atom', selection='group.index==20')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array(['N', 'CA', 'C', 'O', 'CB', 'CG', 'CD'], dtype=object),\n",
       " array([148, 149, 150, 151, 152, 153, 154])]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Names and indices of atoms in group with index 20 (with molsysmt.get()!!!)\n",
    "msm.get(molecular_system, target='atom', selection='group.index==20', name=True, index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3818"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# number of atoms in molecules of type protein\n",
    "msm.get(molecular_system, target='atom', selection='molecule.type==\"protein\"', n_atoms=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "165"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# number of molecules of type water\n",
    "msm.get(molecular_system, target='atom', selection='molecule.type==\"water\"', n_molecules=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Table with attributes you can get\n",
    "\n",
    "The following table shows the list of attribute arguments you can use in `molsysmt.get()`, togethere with their meaning and the list of elements each of them can be used with."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| Property | Meaning | Element the property applies |\n",
    "|:--------|:-------------|:-------------|\n",
    "| 'index' | **index or indices** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'id' | **id or ids** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'name' | **name or names** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'type' | **type or types** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'atom_index' | **atom index or indices** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'atom_id' | **atom id or ids** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'atom_name' |  **atom name or names** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'atom_type' |  **atom type or types** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'group_index' | **group index or indices** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'group_id' | **group id or ids** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'group_name' | **group name or names** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'group_type' | **group type or types** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'component_index' | **component index or indices** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'component_id' | **component id or ids** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'component_name' | **component name or names** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'component_type' | **component type or types** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'molecule_index' | **molecule index or indices** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'molecule_id' | **molecule id or ids** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'molecule_name' | **molecule name or names** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'molecule_type' | **molecule type or types** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'chain_index' | **chain index or indices** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'chain_id' | **chain id or ids** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'chain_name' | **chain name or names** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'chain_type' | **chain type or types** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'entity_index' | **entity index or indices** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'entity_id' | **entity id or ids** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'entity_name' | **entity name or names** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'entity_type' | **entity type or types** of the list of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity'|\n",
    "| 'bonded_atoms' | **bonded atoms** to the list of atoms defined by `indices` or `selection`| 'atom', 'system'|\n",
    "| 'n_atoms' | **number of atoms** in the set of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity', 'system'|\n",
    "| 'n_groups' | **number of groups** in the set of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity', 'system'|\n",
    "| 'n_components' | **number of components** in the set of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity', 'system'|\n",
    "| 'n_molecules' | **number of molecules** in the set of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity', 'system'|\n",
    "| 'n_chains' | **number of chains** in the set of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity', 'system'|\n",
    "| 'n_entities' | **number of entities** in the set of targeted elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity', 'system'|\n",
    "| 'n_bonds' | **number of bonds** present in the set of elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity', 'system'|\n",
    "| 'n_aminoacids' | **number of groups aminoacid type** in the system | 'system'|\n",
    "| 'n_nucleotides' | **number of groups nucleotide type** in the system | 'system'|\n",
    "| 'n_ions' | **number of molecules ion type** in the system | 'system'|\n",
    "| 'n_waters' | **number of molecules water type** in the system | 'system'|\n",
    "| 'n_cosolutes' | **number of molecules cosolute type** in the system | 'system'|\n",
    "| 'n_small_molecules' | **number of molecules small molecule type** in the system | 'system'|\n",
    "| 'n_peptides' | **number of molecules peptide type** in the system | 'system'|\n",
    "| 'n_proteins' | **number of molecules protein type** in the system | 'system'|\n",
    "| 'n_adns' | **number of molecules adn type** in the system | 'system'|\n",
    "| 'n_arns' | **number of molecules arn type** in the system | 'system'|\n",
    "| 'mass' | **mass** of every targeted element defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity', 'system'|\n",
    "| 'charge' | **formal charge** of every targeted element defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity', 'system'|\n",
    "| 'coordinates' | **coordinates of atoms** present in the set of elements defined by `indices` or `selection`| 'atom', 'group', 'component', 'chain', 'molecule', 'entity', 'system'|\n",
    "| 'box' | **box vectors** defining the periodic box of the system -if any-| 'system'|\n",
    "| 'box_shape' | **box shape** of the periodic box of the system -if any-| 'system'|\n",
    "| 'box_lengths' | **edge lengths** of the periodic box of the system -if any-| 'system'|\n",
    "| 'box_angles' | **vertices angles** of the periodic box of the system -if any-| 'system'|\n",
    "| 'time' | **times** stored in the trajectory| 'system'|\n",
    "| 'n_frames' | **number of frames** stored in the trajectory| 'system'|\n",
    "| 'form' | **form** of the molecular system| 'system'|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Some examples over atoms, groups, components, chains, molecules or entities\n",
    "\n",
    "Here you can find some additional examples where `msm.get()` works over atoms, groups, components, chains, molecules or entities:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['N', 'CA', 'C'], dtype=object)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Name of atoms with index 0, 1 or 2\n",
    "msm.get(molecular_system, target='atom', indices=[0,1,2], name=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['N', 'CA', 'C'], dtype=object)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Name of atoms with index 0, 1 or 2\n",
    "msm.get(molecular_system, target='atom', selection='atom.index in [0,1,2]', name=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 4, 4])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group id of atoms with index 0, 1 or 2\n",
    "msm.get(molecular_system, target='atom', selection='atom.index in [0,1,2]', group_id=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of groups in atoms with index 0, 1 or 2\n",
    "msm.get(molecular_system, target='atom', selection='atom.index in [0,1,2]', n_groups=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 5, 6])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Id of groups with index 0, 1 or 2\n",
    "msm.get(molecular_system, target='group', indices=[0,1,2], id=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 5, 6])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Id of groups with index 0, 1 or 2\n",
    "msm.get(molecular_system, target='group', selection='group.index in [0,1,2]', id=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  1,  2, ..., 13, 14, 15])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Index of atoms in groups with index 0 or 1\n",
    "msm.get(molecular_system, target='group', indices=[0,1], atom_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  0,   1,   2, ..., 494, 495, 496])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Index of groups in molecule with index 0\n",
    "msm.get(molecular_system, target='molecule', indices=0, group_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['LYS', 'PRO', 'GLN', ..., 'ALA', 'THR', 'LYS'], dtype=object)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Names of groups in molecule of index 0\n",
    "msm.get(molecular_system, target='molecule', indices=0, group_name=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of molecules of type protein\n",
    "msm.get(molecular_system, target='molecule', selection='molecule.type==\"protein\"', n_molecules=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "497"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of groups in molecules of type protein\n",
    "msm.get(molecular_system, target='molecule', selection='molecule.type==\"protein\"', n_groups=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "165"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of groups in molecules of type water\n",
    "msm.get(molecular_system, target='group', selection='molecule.type==\"water\"', n_groups=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['TRIOSEPHOSPHATE ISOMERASE'], dtype=object)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Name of entity with index 0\n",
    "msm.get(molecular_system, target='entity', indices=0, name=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['water'], dtype=object)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Type of entity with index 1\n",
    "msm.get(molecular_system, target='entity', indices=1, type=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "165"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of molecules in entity with index 1\n",
    "msm.get(molecular_system, target='entity', indices=1, n_molecules=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  1,   2,   3, ..., 163, 164, 165])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Index of molecules in entity with index 1\n",
    "msm.get(molecular_system, target='entity', indices=1, molecule_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['protein', 'protein', 'protein'], dtype=object)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Molecule type of groups with index 10, 11 or 12\n",
    "msm.get(molecular_system, target='group', indices=[10,11,12], molecule_type=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['water', 'water', 'water', 'water', 'water', 'water', 'water',\n",
       "       'water', 'water'], dtype=object)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Molecule type of molecules with index 1 to 9\n",
    "msm.get(molecular_system, target='molecule', indices=range(1,10), molecule_type=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "497"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of groups of type aminoacid\n",
    "msm.get(molecular_system, target='group', selection='group.type==\"aminoacid\"', n_groups=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Some examples over system\n",
    "\n",
    "The element system has some specific observables accounting for the amount of type of elements such as the number of aminoacid groups, ion molecules or protein molecules:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "497"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of aminoacid groups in the system\n",
    "msm.get(molecular_system, target='system', n_aminoacids=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of ion molecules in the system\n",
    "msm.get(molecular_system, target='system', n_ions=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of protein molecules in the system\n",
    "msm.get(molecular_system, target='system', n_proteins=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of rna molecules in the system\n",
    "msm.get(molecular_system, target='system', n_rnas=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3983"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of atoms in the system\n",
    "msm.get(molecular_system, target='system', n_atoms=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of entities in the system\n",
    "msm.get(molecular_system, target='system', n_entities=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting trajectory times and coordinates, and pbc box attributes"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
